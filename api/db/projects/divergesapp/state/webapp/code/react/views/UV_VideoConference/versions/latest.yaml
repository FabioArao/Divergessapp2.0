_updated: 1731151331606
_processing: false
key: webapp.react.views.UV_VideoConference.latest
data:
  analysis: >-
    Analysis for UV_VideoConference:


    1. Component Structure:
       - The component will be a functional React component using hooks for state management.
       - It will integrate with a third-party video conferencing service (e.g., Twilio, Agora, or a custom WebRTC solution).
       - The component will handle both host (teacher) and participant (student/guardian) roles.

    2. State Management:
       - Local state will be used for managing participant list, chat messages, user settings, and conference state.
       - Global state (Redux) will be accessed for user authentication and active course information.

    3. Key Features:
       - Video display area with dynamic layout based on participant count.
       - Audio/video controls for the current user.
       - Chat sidebar for text communication.
       - Screen sharing functionality.
       - Participant list with management tools for the host.
       - Recording controls for the host.

    4. Backend Integration:
       - WebSocket connection for real-time updates (participant joins/leaves, chat messages).
       - API calls for initiating/joining the conference, updating user settings, and managing participants.

    5. User Experience:
       - Responsive design for various screen sizes.
       - Clear indicators for active speakers, muted participants, and screen sharing status.
       - Accessible controls with keyboard navigation support.

    6. Performance Considerations:
       - Efficient rendering of video streams to minimize CPU usage.
       - Optimized chat message handling for smooth scrolling and updates.

    7. Security:
       - Ensure only authenticated users can join the conference.
       - Implement role-based access control for host-specific features.

    8. Error Handling:
       - Graceful handling of connection issues, permissions errors, and device failures.
       - Clear error messages and recovery options for users.

    Implementation Approach:

    - Use React hooks (useState, useEffect, useRef) for managing component state
    and side effects.

    - Integrate with a third-party video conferencing SDK (implementation will
    depend on the chosen service).

    - Use WebSocket for real-time communication with the backend.

    - Implement responsive design using Tailwind CSS classes.

    - Use Redux for accessing global state (auth and active course).
  tsx: >-
    import React, { useState, useEffect, useRef } from 'react';

    import { useParams } from 'react-router-dom';

    import { useSelector, useDispatch } from 'react-redux';

    import { AppState, AppDispatch } from '@/store/main';

    import axios from 'axios';

    import io from 'socket.io-client';


    const UV_VideoConference: React.FC = () => {
      const { meeting_id } = useParams<{ meeting_id: string }>();
      const dispatch = useDispatch<AppDispatch>();
      const auth = useSelector((state: AppState) => state.auth);
      const activeCourse = useSelector((state: AppState) => state.active_course);

      const [participantsList, setParticipantsList] = useState<Array<{
        uid: string;
        name: string;
        role: 'host' | 'participant';
        video_enabled: boolean;
        audio_enabled: boolean;
      }>>([]);

      const [chatMessages, setChatMessages] = useState<Array<{
        uid: string;
        sender_uid: string;
        sender_name: string;
        content: string;
        timestamp: number;
      }>>([]);

      const [userSettings, setUserSettings] = useState({
        video_enabled: true,
        audio_enabled: true,
        screen_sharing: false,
      });

      const [conferenceState, setConferenceState] = useState({
        is_recording: false,
        screen_share_active: false,
        active_speaker_uid: null as string | null,
      });

      const [error, setError] = useState<string | null>(null);
      const [isChatOpen, setIsChatOpen] = useState(false);
      const chatContainerRef = useRef<HTMLDivElement>(null);
      const socketRef = useRef<SocketIOClient.Socket | null>(null);
      const videoContainerRef = useRef<HTMLDivElement>(null);

      useEffect(() => {
        if (!auth.is_authenticated) {
          setError('You must be logged in to join a video conference.');
          return;
        }

        const initializeConference = async () => {
          try {
            const response = await axios.post(`${process.env.REACT_APP_API_URL}/video-conference/join`, {
              meeting_id,
              user_uid: auth.user?.uid,
            }, {
              headers: { Authorization: `Bearer ${auth.token}` },
            });

            const { conference_token, participants } = response.data;
            setParticipantsList(participants);

            // Initialize video conference SDK here
            // This is a placeholder for the actual SDK initialization
            console.log('Initializing video conference with token:', conference_token);

            // Set up WebSocket connection
            socketRef.current = io(`${process.env.REACT_APP_WEBSOCKET_URL}`, {
              query: { token: auth.token },
            });

            socketRef.current.on('participant_joined', (participant) => {
              setParticipantsList((prevList) => [...prevList, participant]);
            });

            socketRef.current.on('participant_left', (participant_uid) => {
              setParticipantsList((prevList) => prevList.filter((p) => p.uid !== participant_uid));
            });

            socketRef.current.on('chat_message', (message) => {
              setChatMessages((prevMessages) => [...prevMessages, message]);
            });

            socketRef.current.on('conference_state_changed', (newState) => {
              setConferenceState(newState);
            });

            return () => {
              if (socketRef.current) {
                socketRef.current.disconnect();
              }
              // Clean up video conference SDK here
            };
          } catch (err) {
            console.error('Failed to initialize conference:', err);
            setError('Failed to join the video conference. Please try again.');
          }
        };

        initializeConference();
      }, [auth, meeting_id]);

      useEffect(() => {
        if (chatContainerRef.current) {
          chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
        }
      }, [chatMessages]);

      const handleToggleAudio = () => {
        setUserSettings((prev) => ({ ...prev, audio_enabled: !prev.audio_enabled }));
        // Implement actual audio toggling with the video conference SDK
      };

      const handleToggleVideo = () => {
        setUserSettings((prev) => ({ ...prev, video_enabled: !prev.video_enabled }));
        // Implement actual video toggling with the video conference SDK
      };

      const handleStartScreenShare = () => {
        setUserSettings((prev) => ({ ...prev, screen_sharing: !prev.screen_sharing }));
        // Implement actual screen sharing with the video conference SDK
      };

      const handleSendChatMessage = (message: string) => {
        if (socketRef.current) {
          socketRef.current.emit('send_chat_message', {
            meeting_id,
            sender_uid: auth.user?.uid,
            sender_name: auth.user?.full_name,
            content: message,
          });
        }
      };

      const handleToggleRecording = () => {
        if (auth.user?.user_type === 'teacher') {
          setConferenceState((prev) => ({ ...prev, is_recording: !prev.is_recording }));
          // Implement actual recording toggling with the video conference SDK
        }
      };

      const handleRemoveParticipant = (participant_uid: string) => {
        if (auth.user?.user_type === 'teacher') {
          // Implement participant removal logic here
          console.log('Removing participant:', participant_uid);
        }
      };

      if (error) {
        return (
          <div className="flex items-center justify-center h-screen bg-gray-100">
            <div className="text-center">
              <h2 className="text-2xl font-bold text-red-600 mb-4">Error</h2>
              <p className="text-gray-700">{error}</p>
            </div>
          </div>
        );
      }

      return (
        <div className="flex flex-col h-screen bg-gray-100">
          <div className="bg-blue-600 text-white p-4">
            <h1 className="text-2xl font-bold">
              {activeCourse ? `${activeCourse.name} - Video Conference` : 'Video Conference'}
            </h1>
          </div>
          <div className="flex flex-1 overflow-hidden">
            <div className="flex-1 flex flex-col">
              <div className="flex-1 bg-black" ref={videoContainerRef}>
                {/* Video conference SDK will render video streams here */}
              </div>
              <div className="bg-gray-800 text-white p-4 flex justify-between items-center">
                <div>
                  <button
                    className={`mr-4 p-2 rounded ${userSettings.audio_enabled ? 'bg-green-500' : 'bg-red-500'}`}
                    onClick={handleToggleAudio}
                  >
                    {userSettings.audio_enabled ? 'Mute' : 'Unmute'}
                  </button>
                  <button
                    className={`mr-4 p-2 rounded ${userSettings.video_enabled ? 'bg-green-500' : 'bg-red-500'}`}
                    onClick={handleToggleVideo}
                  >
                    {userSettings.video_enabled ? 'Stop Video' : 'Start Video'}
                  </button>
                  <button
                    className={`p-2 rounded ${userSettings.screen_sharing ? 'bg-green-500' : 'bg-blue-500'}`}
                    onClick={handleStartScreenShare}
                  >
                    {userSettings.screen_sharing ? 'Stop Sharing' : 'Share Screen'}
                  </button>
                </div>
                {auth.user?.user_type === 'teacher' && (
                  <button
                    className={`p-2 rounded ${conferenceState.is_recording ? 'bg-red-500' : 'bg-green-500'}`}
                    onClick={handleToggleRecording}
                  >
                    {conferenceState.is_recording ? 'Stop Recording' : 'Start Recording'}
                  </button>
                )}
              </div>
            </div>
            <div className={`w-80 bg-white shadow-lg transition-all duration-300 transform ${isChatOpen ? 'translate-x-0' : 'translate-x-full'}`}>
              <div className="flex flex-col h-full">
                <div className="bg-gray-200 p-4 font-bold">Chat</div>
                <div className="flex-1 overflow-y-auto p-4" ref={chatContainerRef}>
                  {chatMessages.map((message) => (
                    <div key={message.uid} className="mb-4">
                      <p className="font-bold">{message.sender_name}</p>
                      <p>{message.content}</p>
                      <p className="text-xs text-gray-500">
                        {new Date(message.timestamp).toLocaleTimeString()}
                      </p>
                    </div>
                  ))}
                </div>
                <div className="p-4 border-t">
                  <form
                    onSubmit={(e) => {
                      e.preventDefault();
                      const input = e.currentTarget.elements.namedItem('chatInput') as HTMLInputElement;
                      if (input.value.trim()) {
                        handleSendChatMessage(input.value.trim());
                        input.value = '';
                      }
                    }}
                  >
                    <input
                      type="text"
                      name="chatInput"
                      className="w-full p-2 border rounded"
                      placeholder="Type a message..."
                    />
                  </form>
                </div>
              </div>
            </div>
          </div>
          <button
            className="fixed right-0 top-1/2 transform -translate-y-1/2 bg-blue-500 text-white p-2 rounded-l-md"
            onClick={() => setIsChatOpen(!isChatOpen)}
          >
            {isChatOpen ? '>' : '<'}
          </button>
          <div className="fixed left-4 top-20 bg-white rounded shadow-lg p-4 max-w-xs">
            <h2 className="font-bold mb-2">Participants ({participantsList.length})</h2>
            <ul>
              {participantsList.map((participant) => (
                <li key={participant.uid} className="flex justify-between items-center mb-2">
                  <span>{participant.name} ({participant.role})</span>
                  {auth.user?.user_type === 'teacher' && participant.role !== 'host' && (
                    <button
                      className="text-red-500 text-sm"
                      onClick={() => handleRemoveParticipant(participant.uid)}
                    >
                      Remove
                    </button>
                  )}
                </li>
              ))}
            </ul>
          </div>
        </div>
      );
    };


    export default UV_VideoConference;
  dependencies:
    react: "*"
    react-router-dom: "*"
    react-redux: "*"
    "@reduxjs/toolkit": "*"
    axios: "*"
    socket.io-client: "*"
  timestamp: "1731114900931"
